<?php

/**
 * BaseShopCategory
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $name
 * @property boolean $is_shown_on_frontend
 * @property boolean $is_popular
 * @property boolean $include_domains
 * @property boolean $special
 * @property string $image
 * @property Doctrine_Collection $ShopGroups
 * @property Doctrine_Collection $CartProduct
 * @property Doctrine_Collection $CategoryRelations
 * 
 * @method string              getName()                 Returns the current record's "name" value
 * @method boolean             getIsShownOnFrontend()    Returns the current record's "is_shown_on_frontend" value
 * @method boolean             getIsPopular()            Returns the current record's "is_popular" value
 * @method boolean             getIncludeDomains()       Returns the current record's "include_domains" value
 * @method boolean             getSpecial()              Returns the current record's "special" value
 * @method string              getImage()                Returns the current record's "image" value
 * @method Doctrine_Collection getShopGroups()           Returns the current record's "ShopGroups" collection
 * @method Doctrine_Collection getCartProduct()          Returns the current record's "CartProduct" collection
 * @method Doctrine_Collection getCategoryRelations()    Returns the current record's "CategoryRelations" collection
 * @method ShopCategory        setName()                 Sets the current record's "name" value
 * @method ShopCategory        setIsShownOnFrontend()    Sets the current record's "is_shown_on_frontend" value
 * @method ShopCategory        setIsPopular()            Sets the current record's "is_popular" value
 * @method ShopCategory        setIncludeDomains()       Sets the current record's "include_domains" value
 * @method ShopCategory        setSpecial()              Sets the current record's "special" value
 * @method ShopCategory        setImage()                Sets the current record's "image" value
 * @method ShopCategory        setShopGroups()           Sets the current record's "ShopGroups" collection
 * @method ShopCategory        setCartProduct()          Sets the current record's "CartProduct" collection
 * @method ShopCategory        setCategoryRelations()    Sets the current record's "CategoryRelations" collection
 * 
 * @package    shop
 * @subpackage model
 * @author     Dmitriy
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseShopCategory extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('shop_category');
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('is_shown_on_frontend', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => false,
             ));
        $this->hasColumn('is_popular', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => false,
             ));
        $this->hasColumn('include_domains', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => false,
             ));
        $this->hasColumn('special', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => false,
             ));
        $this->hasColumn('image', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('ShopGroup as ShopGroups', array(
             'refClass' => 'CategoryRelations',
             'local' => 'category_id',
             'foreign' => 'whmcs_gid'));

        $this->hasMany('CartProduct', array(
             'local' => 'category_id',
             'foreign' => 'id'));

        $this->hasMany('CategoryRelations', array(
             'local' => 'id',
             'foreign' => 'category_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $i18n0 = new Doctrine_Template_I18n(array(
             'fields' => 
             array(
              0 => 'name',
             ),
             ));
        $this->actAs($timestampable0);
        $this->actAs($i18n0);
    }
}