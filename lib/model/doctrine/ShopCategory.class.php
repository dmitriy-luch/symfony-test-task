<?php

/**
 * ShopCategory
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    shop
 * @subpackage model
 * @author     Dmitriy
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class ShopCategory extends BaseShopCategory
{
  /**
   * List of products in the current category
   *
   * @var null|array
   */
  protected $products = null;

  /**
   * Generate thumbnail based on main image
   *
   * @param null|string $uploadedFileName Image name
   * @throws Exception
   */
  public function generateThumbnail($uploadedFileName = null)
  {
    if(!$uploadedFileName)
    {
      $uploadedFileName = $this->getImage();
    }
    $thumbnail = new sfThumbnail(sfConfig::get('app_category_thumbnail_width', 90), sfConfig::get('app_category_thumbnail_height', 90));
    $thumbnail->loadFile($this->getUploadRootDir() . DIRECTORY_SEPARATOR . $uploadedFileName);
    $thumbnail->save($this->getUploadRootDir(true) . DIRECTORY_SEPARATOR . $uploadedFileName);
  }

  /**
   * Remove thumbnail related to current category
   *
   * @return bool True if removal is successful
   */
  public function removeThumbnail()
  {
    $thumbnailFileName = $this->getAbsoluteImagePath(true);
    if(file_exists($thumbnailFileName)){
      return unlink($thumbnailFileName);
    }

    // TODO: Log error since file not found
    return false;
  }

  /**
   * Get absolute path of a category image (or thumbnail)
   *
   * @param bool|false $thumbnail
   * @return string
   */
  public function getAbsoluteImagePath($thumbnail = false)
  {
    $result = $this->getImage();
    if(null !== $result)
    {
      $result = $this->getUploadRootDir($thumbnail) . '/' . $result;
    }
    return $result;
  }

  /**
   * Get web path of a category image (or thumbnail)
   *
   * @param bool|false $thumbnail
   * @return string
   */
  public function getWebImagePath($thumbnail = false)
  {
    $result = $this->getImage();
    if(null !== $result)
    {
      $result = $this->getUploadDir($thumbnail) . '/' . $result;
    }
    return $result;
  }

  /**
   * Get upload directory for images (or thumbnails) starting from Root
   *
   * @param bool|false $thumbnail
   * @return string
   */
  public function getUploadRootDir($thumbnail = false)
  {
    return sfConfig::get('sf_web_dir') . $this->getUploadDir($thumbnail);
  }

  /**
   * Get upload directory for images (or thumbnails)
   *
   * @param bool|false $thumbnail
   * @return mixed
   */
  public function getUploadDir($thumbnail = false)
  {
    if($thumbnail)
    {
      return sfConfig::get('app_category_upload_dir_thumbnail', '/uploads/categories/thumbnail');
    }
    return sfConfig::get('app_category_upload_dir', '/uploads/categories');
  }

  /**
   * Current Category WHMCS Group Ids
   *
   * @return array WHMCS Group Ids
   */
  public function getGroupIds()
  {
    return $this->getShopGroups()->getPrimaryKeys();
  }

  /**
   * Cheapest price among all Category Group Products (and Domains)
   *
   * @param $currency WHMCS Currency ID
   * @return mixed Price
   */
  public function getCheapestPrice($currencyId, $reload = false)
  {
    $redis = sfRedis::getClient();
    $cheapestPrice = $redis->hget('categoryPrice' . $this->getId(), $currencyId);
    if (!$reload && !empty($cheapestPrice))
    {
      return $cheapestPrice;
    }

    $config = [
        'groups' => $this->getGroupIds(),
        'domains' => $this->getIncludeDomains(),
        'currency' => $currencyId,
    ];

    $result = Doctrine::getTable('WhmcsPrice')->getCheapestProductsPrices($config);
    $cheapest = reset($result);

    // Saving cheapest price to Redis cache
    $redis->hset('categoryPrice' . $this->getId(), $currencyId, $cheapest);
    // Using config value or 30 days (60 * 60 * 24 * 30)
    $categoryCheapestPricesExpiration = sfConfig::get('app_cache_expiration_category_cheapest_prices', 60 * 60 * 24 * 30);
    $redis->expire('categoryPrice', $categoryCheapestPricesExpiration);

    return $cheapest;
  }

  /**
   * Get list of products for current category.
   * Load products first if none are loaded yet
   *
   * @return array
   */
  public function getProducts()
  {
    if(!$this->products)
    {
      $this->loadProducts();
    }
    return $this->products;
  }

  /**
   * Load products(domains) from WHMCS tables
   */
  protected function loadProducts()
  {
    // Initialize products with an empty array
    $this->products = [];
    // Get all products from ProductInternal
    $internalProducts = Doctrine::getTable('WhmcsProductInternal')->findAllByGroupIds($this->getGroupIds());
    foreach($internalProducts as $internalProduct)
    {
      // Create new ShopProduct for each of internal products
      $this->products[] = new ShopProduct($internalProduct);
    }
    // If current category includes domains
    if ($this->getIncludeDomains())
    {
      // Get all domains from DomainTld
      $internalDomains = Doctrine::getTable('WhmcsDomainTld')->findAllWithPrices();
      foreach($internalDomains as $internalDomain)
      {
        // Create new ShopProduct for each of domains
        $this->products[] = new ShopProduct($internalDomain);
      }
    }
  }
}
